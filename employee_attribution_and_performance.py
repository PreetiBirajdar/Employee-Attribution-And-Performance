# -*- coding: utf-8 -*-
"""Employee Attribution And Performance

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q14cpRiFlON33nYZQ_bClHjMKOY3AUZA
"""

import numpy as np 
import os
import pandas as pd
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

"""Education<br>
1 'Below College' 2 'College' 3 'Bachelor' 4 'Master' 5 'Doctor'

EnvironmentSatisfaction<br>
1 'Low' 2 'Medium' 3 'High' 4 'Very High'

JobInvolvement<br>
1 'Low' 2 'Medium' 3 'High' 4 'Very High'

JobSatisfaction<br>
1 'Low' 2 'Medium' 3 'High' 4 'Very High'

PerformanceRating<br>
1 'Low' 2 'Good' 3 'Excellent' 4 'Outstanding'

RelationshipSatisfaction<br>
1 'Low' 2 'Medium' 3 'High' 4 'Very High'

WorkLifeBalance<br>
1 'Bad' 2 'Good' 3 'Better' 4 'Best'
"""

import plotly.graph_objects as go
import plotly.express as px
import plotly.figure_factory as ff

df = pd.read_csv('/content/WA_Fn-UseC_-HR-Employee-Attrition.csv')

df.head()

df.describe()

df.info()

df.nunique()

"""**Since, Over18, EmployeeCount and StandardHours have only one kind of value, I am removing both the columns**"""

df.drop(['Over18', 'StandardHours', 'EmployeeCount'], axis = 'columns', inplace = True)

df.head()

"""# Univariate Analysis

### For numerical values
"""

fig = px.histogram(df, x="Age", nbins=35)
fig.show()

"""### For categorical data"""

fig = px.histogram(df, x="BusinessTravel", color = "BusinessTravel")
fig.show()

"""## Adding more details using Figure Factory and Graph Objects

### For Categorical Data
"""

df['Education'].value_counts()

education = {1 : 'Below College',
             2 : 'College',
            3 : 'Bachelor',
            4 : 'Master',
            5 : 'Doctor'}

Education = pd.DataFrame(df['Education'].value_counts())
Education = Education.reset_index()
Education.columns = ['Education', 'No. of employees']

Education['Education'] = Education['Education'].replace(education)

Education

fig = ff.create_table(Education)

fig.add_trace(go.Bar(x= list(Education.Education), 
                     y=list(Education['No. of employees']), 
                     xaxis='x2', yaxis='y2',
                    name='Count'))


fig.update_layout(
    title_text = 'Number of employees having respective education',
    height = 1000,
    margin = {'t':75, 'l':50},
    yaxis = {'domain': [0, .45]},
    xaxis2 = {'anchor': 'y2'},
    yaxis2 = {'domain': [.6, 1], 'anchor': 'x2', 'title': 'Count'}
)
for i in range(len(fig.layout.annotations)):
    fig.layout.annotations[i].font.size = 15

fig.show()

"""### For numerical data"""

fig = ff.create_distplot([df['Age']], group_labels =['age_density'], colors = ['#ff0000'])
fig.show()

"""# Bivariate Analysis

### Categorical v/s Numerical
"""

fig = px.bar(df, x='MonthlyIncome', y='Department')
fig.show()

"""**If we directly create a plot between a categorical and numerical variable then it will just plot row by row data without considering any average value or any sequence**"""

avg_sal = pd.DataFrame(df.groupby('Department')['MonthlyIncome'].mean())
avg_sal = avg_sal.reset_index()
avg_sal.columns = ['Department', 'Avg. Salary']

fig = px.bar(avg_sal, x='Avg. Salary', y='Department', color = 'Department')
fig.show()

"""### Numerical v/s Numerical (Continuous data)"""

fig = px.scatter(df , x= 'Age', y='MonthlyIncome')
fig.show()

"""**We can clearly observe here that employees with lesser age have lesser income :(**

# Multivariate Analysis

**To analyse the relationship between 3 or more variables**

### Heatmap
"""

fig = px.imshow(df.corr())
fig.show()

"""### Scatter Plot (With box and violin plot)"""

px.scatter(df , x= 'Age', y='MonthlyIncome', color = 'Attrition', marginal_x = 'box', marginal_y = 'violin')

"""**Click on any one of the attrition at the corner to remove it from the graph**"""

fig = px.bar(df, x="Department", y="MonthlyIncome",
             color='Attrition', barmode='group',
             height=400)
fig.show()

"""**Here also it is plotting the row by row data**"""

data = df.groupby(['Department', 'Attrition'])['MonthlyIncome'].mean().reset_index()

"""#### Grouped Bar charts"""

fig = px.bar(data, x="Department", y="MonthlyIncome",
             color='Attrition', barmode='group',
             height=400)
fig.show()

"""**Here, we are checking the average monthly income of different departments based on their attrition**

#### Stacked Bar Charts
"""

fig = px.bar(data, x="Department", y="MonthlyIncome",
             color='Attrition', barmode='stack',
             height=400)
fig.show()

"""### Facet Col and row

**To divide rows and columns based on the categorical column**
"""

data = df.groupby(['Department','Gender', 'BusinessTravel', 'Attrition'])['MonthlyIncome'].mean().reset_index()

px.bar(data, x = 'Department', 
           y = 'MonthlyIncome', 
           color = 'Attrition',
          barmode = 'group',
          facet_col = 'BusinessTravel',
          facet_row = 'Gender')

"""# Statistical Analysis

### Box Plot
"""

px.box(df, x = 'EducationField', y = 'MonthlyIncome', color = 'Attrition')

"""### Violin Plot"""

px.violin(df, x = 'EducationField', y = 'MonthlyIncome', color = 'Attrition')

"""# WordCloud"""

from wordcloud import WordCloud
import matplotlib.pyplot as plt

fields = ['EducationField']
text = pd.read_csv('/content/WA_Fn-UseC_-HR-Employee-Attrition.csv')

text3 = ' '.join(text['EducationField'])
wordcloud2 = WordCloud().generate(text3)
# Generate plot
plt.figure(figsize = (16,6))
plt.imshow(wordcloud2)
plt.axis("off")
plt.show()

"""# Treemaps"""

px.treemap(df, path = ['Department','BusinessTravel','Gender'], values = 'MonthlyIncome')

"""### How to gain insights from this tree map?

**The department which earns highest income is R&D.**<br>
**In R&D, those who earn highest income travel_rarely**<br>
**In R&D, those who travel_rarely, Males earn more income**
"""